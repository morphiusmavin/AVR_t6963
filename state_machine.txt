state machine.txt

The AVR starts the process by setting index when the user chooses a menu that assigns
an index number to aux_index. The PIC24 then goes and gets the data for that index
and tells the AVR it has data. The user then can modify the data and then the AVR 
tells the PIC24 the data is ready to be updated.


				PIC24										AVR
				reads aux_data
IDLE_AUX		waits for CMD_GET_DATA						waits for aux_index to be set 
															then sends CMD_GET_DATA

DATA_REQ		using index, gets data and sends 			waits for CMD_DATA_READY
				CMD_DATA_READY								then reads current data
				
VALID_DATA		waits for AVR to send CMD_NEW_DATA			waits for user to modify data
															and then sends CMD_NEW_DATA

DATA_READY		reads new data then goes back to IDLE		
															writes aux_data

AVR writes aux_data at end of RT_AUX1 
AVR writes aux_data2 at end of RT_AUX2

AVR reads auxcmd/auxparam from param_string at the end of RT_AUX1
AVR reads tempint2 from param_string in RT_AUX2

PIC24 reads laux_data at beginning of RT_AUX1 
PIC24 reads laux_data2 at beginning of RT_AUX2

PIC24 writes auxcmd/param in RT_AUX1 (using rtdata[code2]
PIC24 writes sample_data[aux_index] into rtdata[code2+1] in DATA_REQ state of RT_AUX1
(essentially writing it during RT_AUX2


RT_AUX1

				PIC24										AVR
IDLE_AUX		waits for CMD_GET_DATA						waits for aux_index to be set 
															then sends CMD_GET_DATA int aux_data[0]
															and aux_index in aux_data[1]

DATA_REQ		using index, gets data and sends 			waits for CMD_DATA_READY
				CMD_DATA_READY								then reads current data
				
VALID_DATA		waits for AVR to send CMD_NEW_DATA			waits for user to modify data
															and then sends CMD_NEW_DATA

DATA_READY		reads new data then goes back to IDLE		


RT_AUX2
				PIC24										AVR
				reads aux_data2
															gets tempint2 from param_string
															write aux_data2	
